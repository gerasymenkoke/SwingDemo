name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

    
    
jobs:
 
  build-with-upload-artifact:
    runs-on:   ubuntu-latest
    
  
    steps:
        

    
    - uses:  actions/checkout@v3
    
    
   

    - name: Set up JDK 
      uses: actions/setup-java@v3
      with:
          java-version: 16.0.1+9
          distribution: 'adopt'


    - name: Backup JAVA_HOME
      id: java-home
      run: echo "::set-output name=path::$JAVA_HOME"
    
    
      

    - name: Android JDK install and aab build 
      env:
        PASSWORDB64: ${{ secrets.PASSWORDB64 }}
        KEYSTORE_JKS: ${{ secrets.KEYSTORE_JKS }}
        
      run: |
             sudo apt-get update
             sudo apt-get install libc6-dev-i386 lib32z1 openjdk-11-jdk
                        
             pwd
             ls -l
                             
             cd /home/runner/work/android-java-terminal/android-java-terminal/
            # chmod +x build.sh
            # ./build.sh
            # set -e
             PROJ="/home/runner/work/android-java-terminal/android-java-terminal"
             AAPT="/usr/local/lib/android/sdk/build-tools/31.0.0/aapt"
             AAPT2="/usr/local/lib/android/sdk/build-tools/31.0.0/aapt2"
             DX="/usr/local/lib/android/sdk/build-tools/30.0.0/dx"
             ZIPALIGN="/usr/local/lib/android/sdk/build-tools/31.0.0/zipalign"
             APKSIGNER="/usr/local/lib/android/sdk/build-tools/31.0.0/apksigner" 
             PLATFORM="/usr/local/lib/android/sdk/platforms/android-31/android.jar"
             JAVA_HOME="/opt/hostedtoolcache/Java_Adopt_jdk/16.0.1-9/x64"
             cd $PROJ
             echo "Cleaning..."
             rm -rf obj/*
             rm -rf src/com/example/helloandroid/R.java
             mkdir bin
             echo "Compiling APK..."
             javac -d obj  -classpath src -bootclasspath $PLATFORM -source 1.7 -target 1.7 src/com/hellokostya/helloandroid/MainActivity.java

             pwd
ls -l

cd $PROJ

echo "Translating in Dalvik bytecode..."
$DX --dex --output=classes.dex obj
pwd
ls -l

echo "Making JAR..."

cd $PROJ


echo "Run Java..."
#java -cp obj com.hellokostya.helloandroid.MainActivity


cd $PROJ

echo "Making APK..."
$AAPT package -f -m -F $PROJ/bin/hello.unaligned.apk -M $PROJ/AndroidManifest.xml -S $PROJ/res -I $PLATFORM
$AAPT add $PROJ/bin/hello.unaligned.apk classes.dex

$AAPT list $PROJ/bin/hello.unaligned.apk
cd $PROJ/bin
pwd
ls -l

echo "ZIPALIGNing APK..."
cd $PROJ/bin
$ZIPALIGN -p -f -v 4 $PROJ/bin/hello.unaligned.apk $PROJ/bin/hello.apk 
cp hello.apk  $PROJ/app/build/outputs/apk/release/
cd $PROJ/app/build/outputs/apk/release/
pwd
ls -l 



echo "Signing  APK...."
cd /home/runner/work/android-java-terminal/android-java-terminal/







echo 
 $JAVA_HOME/bin/keytool -list -v -keystore $PROJ/signing_key.jks   -storepass "B395b39595"    
pwd
ls -l


printf   "B395b39595" > $PROJ/password.txt
          
$APKSIGNER sign  --ks $PROJ/signing_key.jks   $PROJ/app/build/outputs/apk/release/hello.apk  < $PROJ/password.txt

$APKSIGNER verify -v  -v4-signature-file $PROJ/app/build/outputs/apk/release/hello.apk.idsig $PROJ/app/build/outputs/apk/release/hello.apk 

echo "Making AAB..."

echo "Compile resourses..."
$AAPT2 compile --dir $PROJ/res/ -o $PROJ/obj/res.zip

echo "Link resourses..."
$AAPT2 link --proto-format -o $PROJ/obj/linked.zip -I $PLATFORM --manifest $PROJ/AndroidManifest.xml --java src $PROJ/obj/res.zip --auto-add-overlay

echo "Compile the Java sources to bytecode"
javac -d obj -classpath src -bootclasspath $PLATFORM -source 1.7 -target 1.7 src/com/example/helloandroid/MainActivity.java
echo "Convert the bytecode to Dex format (Dalvik Android virtual machine)"
$DX --dex --output=bin/classes.dex obj

echo "Combine the resources and the bytecode into a single bundle"
cd $JAVA_HOME/bin
pwd
ls -l

cd $PROJ/obj
$JAVA_HOME/bin/jar  xf $PROJ/obj/linked.zip resources.pb AndroidManifest.xml res
mkdir manifest dex 
mv AndroidManifest.xml manifest
cp ../bin/classes*.dex dex/ 
echo "jar cmf"
$JAVA_HOME/bin/jar cMf base.zip manifest dex res resources.pb

echo "Build the AAB"
wget https://github.com/google/bundletool/releases/download/1.11.2/bundletool-all-1.11.2.jar 
pwd
ls -l
echo "Java -jar bundletool"

$JAVA_HOME/bin/java -jar bundletool-all-1.11.2.jar build-bundle --modules=base.zip --output=../bin/hello.aab
cd $PROJ/bin
pwd
ls -l




echo "Sign AAB"
$JAVA_HOME/bin/jarsigner --help
cd $PROJ/bin
echo "jarsigner....."
cat $PROJ/password.txt
cat $PROJ/signing_key.jks
    

$JAVA_HOME/bin/jarsigner  -keystore $PROJ/signing_key.jks   -storepass "B395b39595"    $PROJ/bin/hello.aab mykey

$JAVA_HOME/bin/keytool -list -v -keystore $PROJ/signing_key.jks   -storepass "B395b39595"    















                  
                    
             
            
                           
           
    - name: Upload APK 
     
      uses: actions/upload-artifact@v3
      with:
          name: apk file with signing
          path: /home/runner/work/android-java-terminal/android-java-terminal/app/build/outputs/apk/release/hello.apk   
           
    - name: Upload AAB
     
      uses: actions/upload-artifact@v3
      with:
          name:  aab  file with signing
          path: /home/runner/work/android-java-terminal/android-java-terminal/bin/hello.aab   
           
   
   
    - name: Upload Mainactivity.class
     
      uses: actions/upload-artifact@v3
      with:
          name:  Mainactivity.class
          path: /home/runner/work/android-java-terminal/android-java-terminal/obj/com/hellokostya/helloandroid/MainActivity.class

    - name: Upload All
     
      uses: actions/upload-artifact@v3
      with:
          name:  All
          path: /home/runner/work/android-java-terminal/android-java-terminal/
     
 
 
 
 
 
 
 
 
    - name: Upload signing_key.jks
     
      uses: actions/upload-artifact@v3
      with:
          name:  signing_key.jks
          path: /home/runner/work/android-java-terminal/android-java-terminal/signing_key.jks
  
    - name: Archive site content
      uses: thedoctor0/zip-release@master
      with:
            filename: test.zip     
            exclusions: ' *.cpp / *.c /*.yml  / .git'  
               
    - name: Create new release
      id: create-new-release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
                run_number
          draft: false
          prerelease: false     
